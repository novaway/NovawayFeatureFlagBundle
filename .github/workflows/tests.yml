name: Continuous Integration
on: [push]

jobs:
    cs:
      runs-on: ubuntu-latest
      steps:
        - name: Checkout
          uses: actions/checkout@v4
        - name: Setup PHP
          uses: shivammathur/setup-php@v2
          with:
            php-version: 8.2
            coverage: xdebug
        - name: Get Composer Cache Directory
          id: composer-cache
          run: echo "::set-output name=dir::$(composer config cache-files-dir)"
        - name: Cache dependencies
          uses: actions/cache@v3
          with:
            path: ${{ steps.composer-cache.outputs.dir }}
            key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.json') }}
            restore-keys: ${{ runner.os }}-composer-
        - name: Install Dependencies
          run: composer install --prefer-dist --no-interaction --optimize-autoloader
          working-directory: ./tools
        - name: Run PHP CS Fixer
          run: tools/vendor/bin/php-cs-fixer fix --dry-run --diff

    phpstan:
        runs-on: ubuntu-latest
        steps:
            - name: Checkout
              uses: actions/checkout@v4
            - name: Setup PHP
              uses: shivammathur/setup-php@v2
              with:
                php-version: 8.2
                coverage: xdebug
            - name: Get Composer Cache Directory
              id: composer-cache
              run: echo "::set-output name=dir::$(composer config cache-files-dir)"
            - name: Cache dependencies
              uses: actions/cache@v3
              with:
                path: ${{ steps.composer-cache.outputs.dir }}
                key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.json') }}
                restore-keys: ${{ runner.os }}-composer-
            - name: Install Dev Tools
              run: composer install --prefer-dist --no-interaction --optimize-autoloader
              working-directory: ./tools
            - name: Install Dependencies
              run: composer install --prefer-dist --no-interaction --optimize-autoloader
            - name: Run PHPStan
              run: tools/vendor/bin/phpstan

    tests:
        runs-on: ubuntu-latest
        strategy:
            matrix:
                php: ['8.1', '8.2', '8.3']
                flags: ['--prefer-lowest', '--prefer-stable']
                symfony-version: ['5.4.*', '6.3.*', '6.4.*']
                include:
                    - php: '8.2'
                      symfony-version: '7.0.*'
            fail-fast: false
        steps:
            - name: Checkout
              uses: actions/checkout@v4
            - name: Setup PHP
              uses: shivammathur/setup-php@v2
              with:
                  php-version: ${{ matrix.php }}
                  coverage: xdebug
            - name: Get Composer Cache Directory
              id: composer-cache
              run: echo "::set-output name=dir::$(composer config cache-files-dir)"
            - name: Cache dependencies
              uses: actions/cache@v3
              with:
                  path: ${{ steps.composer-cache.outputs.dir }}
                  key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.json') }}
                  restore-keys: ${{ runner.os }}-composer-
            - name: Setup Composer minimum stability if required
              run: composer config minimum-stability dev
              if: ${{ contains(fromJSON('["6.4.*", "7.0.*"]'), matrix.symfony-version) }}
            - name: Install symfony version from matrix
              env:
                  SYMFONY_VERSION: ${{ matrix.symfony-version }}
              run: |-
                composer require symfony/framework-bundle:$SYMFONY_VERSION --no-update
                composer require symfony/console:$SYMFONY_VERSION --no-update
            - name: Install Dependencies
              run: composer update --prefer-dist --no-interaction --optimize-autoloader --no-progress $COMPOSER_FLAGS
              env:
                  COMPOSER_FLAGS: ${{ matrix.flags }}
            - name: Run PHPUnit
              run: vendor/bin/phpunit --coverage-clover=coverage.xml
            - name: Analyze code coverage
              uses: timkrase/phpunit-coverage-badge@v1.2.0
              with:
                  report: coverage.xml
                  push_badge: true
                  repo_token: ${{ secrets.GITHUB_TOKEN }}
